{"ast":null,"code":"var _jsxFileName = \"/home/vanine/Desktop/maps/frontend/src/components/addProblem.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Select, InputNumber, Upload, Icon, message } from 'antd';\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport { updatePoint } from '../actions/updatepoint';\nimport FormItem from 'antd/lib/form/FormItem';\nconst Option = Select.Option;\nconst TextArea = Input.TextArea;\n\nclass AddProblemForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('image: ', this.fileInput.current.input.files[0]);\n          const newProblem = {\n            category: values.category,\n            longitude: values.longitude,\n            latitude: values.latitude,\n            description: values.description,\n            image: this.fileInput.current.input.files[0].name\n          };\n          const newPoint = {\n            latitude: values.latitude,\n            longitude: values.longitude\n          };\n          console.log(newProblem);\n          fetch(\"http://localhost:3001/add_problem\", {\n            method: 'POST',\n            body: JSON.stringify(newProblem),\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          }).then(response => response.json()).then(response => {\n            console.log('response: ', response);\n          }).then(() => {\n            fetch(\"http://localhost:3001/add_point\", {\n              method: 'POST',\n              body: JSON.stringify(newPoint),\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            }).then(res => {\n              console.log(\"resp: \", res);\n\n              if (res.status === 200) {\n                this.props.addPoint(newPoint);\n              } else if (res.status === 201) {\n                this.props.updatePoint(newPoint);\n              }\n\n              res.json();\n            }).then(res => {\n              console.log('response: ', res);\n            }).then(() => {\n              console.log(\"jdgfhdghfd\");\n            });\n          }).catch(error => console.log('error:', error));\n        }\n\n        this.props.form.resetFields();\n      });\n    };\n\n    this.handleChange = value => {\n      console.log(`selected ${value}`);\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.fileInput = React.createRef();\n  }\n\n  render() {\n    const props = {\n      name: 'file',\n      action: 'http://localhost:3001/add_image',\n      headers: {\n        authorization: 'authorization-text'\n      },\n\n      onChange(info) {\n        if (info.file.status !== 'uploading') {\n          console.log(info.file, info.fileList);\n        }\n\n        if (info.file.status === 'done') {\n          message.success(`${info.file.name} file uploaded successfully`);\n        } else if (info.file.status === 'error') {\n          message.error(`${info.file.name} file upload failed.`);\n        }\n      }\n\n    };\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formStyle = {\n      marginLeft: '20%',\n      marginTop: '3%',\n      width: '50%'\n    };\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"form\",\n      style: formStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, \"Category\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, getFieldDecorator('category', {\n      initialValue: 'Garbage disposal is not done on time'\n    })(React.createElement(Select, {\n      style: {\n        width: '100%'\n      },\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"0\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, \"Garbage disposal is not done on time\"), React.createElement(Option, {\n      value: \"1\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, \"Trash has no lid\"), React.createElement(Option, {\n      value: \"2\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, \"Trash is placed in the wrong place\")))), React.createElement(Form.Item, {\n      label: \"Latitude\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, getFieldDecorator('latitude', {\n      rules: [{\n        validator(rule, value, callback) {\n          if (!value) {\n            callback('Latitude is required');\n            return;\n          }\n\n          if (value > 85 || value < -85) {\n            callback('Invalid value!');\n            return;\n          }\n\n          if (typeof value !== 'number') {\n            callback('Latitude is not a number');\n            return;\n          } else {\n            callback();\n          }\n        }\n\n      }]\n    })(React.createElement(InputNumber, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Longitude\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, getFieldDecorator('longitude', {\n      rules: [{\n        validator(rule, value, callback) {\n          if (!value) {\n            callback('Longitude is required');\n            return;\n          }\n\n          if (value > 180 || value < -180) {\n            callback('Invalid value!');\n            return;\n          }\n\n          if (typeof value !== 'number') {\n            callback('Longitude is not a number');\n            return;\n          } else {\n            callback();\n          }\n        }\n\n      }]\n    })(React.createElement(InputNumber, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, getFieldDecorator('description', {\n      rules: [{\n        type: 'string'\n      }, {\n        min: 20,\n        message: 'Must contain at least 20 letters!'\n      }, {\n        max: 300,\n        message: 'Must contain at most 300 letters!'\n      }]\n    })(React.createElement(TextArea, {\n      rows: 3,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    }))), React.createElement(FormItem, {\n      label: \"Image\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208\n      },\n      __self: this\n    }, getFieldDecorator('image', {// rules: [\n      //   {\n      //     type: 'string',\n      //   },\n      //   {\n      //     min: 20,\n      //     message: 'Must contain at least 20 letters!',\n      //   },\n      //   {\n      //     max: 300,\n      //     message: 'Must contain at most 300 letters!',\n      //   }\n      // ],\n    })(React.createElement(Input, {\n      type: \"file\",\n      ref: this.fileInput,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"Add\")));\n  }\n\n}\n\nconst WrappedAddProblemForm = Form.create({\n  name: 'register'\n})(AddProblemForm);\nexport default connect(state => ({\n  points: state.points\n}), dispatch => ({\n  addPoint: data => {\n    dispatch(addPoint(data));\n  },\n  setPoints: data => {\n    dispatch(setPoints(data));\n  },\n  updatePoint: data => {\n    dispatch(updatePoint(data));\n  }\n}))(WrappedAddProblemForm);","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/components/addProblem.js"],"names":["React","Form","Input","Button","Select","InputNumber","Upload","Icon","message","connect","addPoint","setPoints","updatePoint","FormItem","Option","TextArea","AddProblemForm","Component","constructor","props","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","form","validateFieldsAndScroll","err","values","console","log","fileInput","current","input","files","newProblem","category","longitude","latitude","description","image","name","newPoint","fetch","method","body","JSON","stringify","headers","then","response","json","res","status","catch","error","resetFields","handleChange","value","handleConfirmBlur","target","setState","createRef","render","action","authorization","onChange","info","file","fileList","success","getFieldDecorator","formStyle","marginLeft","marginTop","width","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","initialValue","rules","validator","rule","callback","type","min","max","WrappedAddProblemForm","create","points","dispatch","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Select, InputNumber, Upload, Icon, message } from 'antd';\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport { updatePoint } from '../actions/updatepoint';\nimport FormItem from 'antd/lib/form/FormItem';\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nclass AddProblemForm extends React.Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n    constructor(props) {\n      super(props);\n      this.fileInput = React.createRef();\n    }\n    handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          console.log('image: ', this.fileInput.current.input.files[0]);\n\n          const newProblem = {\n            category: values.category,\n            longitude: values.longitude,\n            latitude: values.latitude,\n            description: values.description,\n            image: this.fileInput.current.input.files[0].name\n        };\n          const newPoint = {\n            latitude: values.latitude,\n            longitude: values.longitude\n          }\n        console.log(newProblem);\n        fetch(\"http://localhost:3001/add_problem\", {\n            method: 'POST',\n            body: JSON.stringify(newProblem),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                },\n        }).then(response => response.json())\n        .then(response => {console.log('response: ', response)})\n        .then(() => {\n        fetch(\"http://localhost:3001/add_point\", {\n          method: 'POST',\n          body: JSON.stringify(newPoint),\n          headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              },\n        }).then(res => {\n          console.log(\"resp: \", res);\n          if(res.status === 200) {\n            this.props.addPoint(newPoint);\n          }\n          else if(res.status === 201) {\n            this.props.updatePoint(newPoint);\n          }\n          res.json()})\n        .then(res => {console.log('response: ', res)})\n        .then(() => {\n          console.log(\"jdgfhdghfd\");\n        })\n      })\n        .catch(error => console.log('error:', error));\n      }\n      this.props.form.resetFields();\n      })};\n\n    handleChange = (value) => {\n        console.log(`selected ${value}`);\n    };\n\n    handleConfirmBlur = e => {\n      const { value } = e.target;\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n    \n    render() {\n      \n      const props = {\n        name: 'file',\n        action: 'http://localhost:3001/add_image',\n        headers: {\n          authorization: 'authorization-text',\n        },\n        onChange(info) {\n          if (info.file.status !== 'uploading') {\n            console.log(info.file, info.fileList);\n          }\n          if (info.file.status === 'done') {\n            message.success(`${info.file.name} file uploaded successfully`);\n          } else if (info.file.status === 'error') {\n            message.error(`${info.file.name} file upload failed.`);\n          }\n        },\n      };\n      const { getFieldDecorator } = this.props.form;\n      const formStyle = {\n          marginLeft: '20%',\n          marginTop: '3%',\n          width: '50%'\n      }\n  \n      const formItemLayout = {\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 8 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n      };\n      const tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0,\n          },\n          sm: {\n            span: 16,\n            offset: 8,\n          },\n        },\n      };\n       return (\n        <Form {...formItemLayout} onSubmit={this.handleSubmit} className='form' style={formStyle}>\n             <Form.Item label={<span>Category</span>}>\n             {getFieldDecorator('category', {\n                initialValue: 'Garbage disposal is not done on time'\n            })(<Select style={{ width: '100%' }} onChange={this.handleChange}>\n                <Option value=\"0\">Garbage disposal is not done on time</Option>\n                <Option value=\"1\">Trash has no lid</Option>\n                <Option value=\"2\">Trash is placed in the wrong place</Option>\n            </Select>)}\n          </Form.Item>\n          <Form.Item label=\"Latitude\">\n            {getFieldDecorator('latitude', {\n              rules: [\n                {\n                  validator(rule, value, callback) {\n                    if(!value) {\n                      callback('Latitude is required');\n                      return;\n                    }\n                    if(value > 85 || value < -85) {\n                      callback('Invalid value!');\n                      return;\n                    }\n                    if(typeof(value) !== 'number') {\n                      callback('Latitude is not a number');\n                      return;\n                    }\n                    else {\n                      callback();\n                    }\n                  } \n                },\n              ],\n            })(<InputNumber style={{width: '100%'}} />)}\n          </Form.Item>\n          <Form.Item label=\"Longitude\">\n            {getFieldDecorator('longitude', {\n              rules: [\n                {\n                  validator(rule, value, callback) {\n                    if(!value) {\n                      callback('Longitude is required');\n                      return;\n                    }\n                    if(value > 180 || value < -180) {\n                      callback('Invalid value!');\n                      return;\n                    }\n                    if(typeof(value) !== 'number') {\n                      callback('Longitude is not a number');\n                      return;\n                    }\n                    else {\n                      callback();\n                    }\n                  } \n                },\n              ],\n            })(<InputNumber style={{width: '100%'}}/>)}\n          </Form.Item>   \n          <Form.Item label=\"Description\">\n            {getFieldDecorator('description', {\n              rules: [\n                {\n                  type: 'string',\n                },\n                {\n                  min: 20,\n                  message: 'Must contain at least 20 letters!',\n                },\n                {\n                  max: 300,\n                  message: 'Must contain at most 300 letters!',\n                }\n              ],\n            })(<TextArea rows={3} />)}\n          </Form.Item>  \n          <FormItem label='Image'>\n          {getFieldDecorator('image', {\n              // rules: [\n              //   {\n              //     type: 'string',\n              //   },\n              //   {\n              //     min: 20,\n              //     message: 'Must contain at least 20 letters!',\n              //   },\n              //   {\n              //     max: 300,\n              //     message: 'Must contain at most 300 letters!',\n              //   }\n              // ],\n            })(<Input type='file' ref={this.fileInput}/>)}          \n            </FormItem>   \n         <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Add\n            </Button>\n          </Form.Item>\n        </Form>\n      );\n    }\n  }\n  \nconst WrappedAddProblemForm = Form.create({ name: 'register' })(AddProblemForm);\nexport default connect(\n  state => ({\n    points: state.points,\n    }),\n  dispatch => ({\n    addPoint: (data => {\n      dispatch(addPoint(data))\n    }),\n    setPoints: ((data) => {\n      dispatch(setPoints(data))\n    }),\n    updatePoint: ((data) => {\n      dispatch(updatePoint(data))\n    }),\n}))(WrappedAddProblemForm);"]},"metadata":{},"sourceType":"module"}