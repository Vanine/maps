{"ast":null,"code":"var _jsxFileName = \"/home/vanine/Desktop/maps/frontend/src/components/addProblem.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Select, InputNumber } from 'antd';\nconst Option = Select.Option;\nconst TextArea = Input.TextArea;\n\nclass AddProblemForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          const newProblem = {\n            category: values.category,\n            longitude: values.longitude,\n            latitude: values.latitude,\n            description: values.description\n          };\n          const newPoint = {\n            latitude: values.latitude,\n            longitude: values.longitude\n          };\n          console.log(newProblem);\n          fetch(\"http://localhost:3001/add_problem\", {\n            method: 'POST',\n            body: JSON.stringify(newProblem),\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n            }\n          }).then(response => response.json()).then(response => {\n            console.log('response: ', response);\n          }).then(() => {\n            fetch(\"http://localhost:3001/add_point\", {\n              method: 'POST',\n              body: JSON.stringify(newPoint),\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            });\n          }).then(response => {\n            console.log(\"resp: \", response);\n            response.json();\n          }).then(response => {\n            console.log('response: ', response);\n          }).catch(error => console.log('error:', error));\n        }\n\n        this.props.form.resetFields();\n      });\n    };\n\n    this.handleChange = value => {\n      console.log(`selected ${value}`);\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formStyle = {\n      marginLeft: '20%',\n      marginTop: '3%',\n      width: '50%'\n    };\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"form\",\n      style: formStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94\n        },\n        __self: this\n      }, \"Category\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, getFieldDecorator('category', {\n      rules: [{\n        required: true\n      }]\n    })(React.createElement(Select, {\n      style: {\n        width: '100%'\n      },\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(Option, {\n      value: \"Garbage disposal is not done on time\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Garbage disposal is not done on time\"), React.createElement(Option, {\n      value: \"Trash has no lid\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, \"Trash has no lid\"), React.createElement(Option, {\n      value: \"Trash is placed in the wrong place\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"Trash is placed in the wrong place\")))), React.createElement(Form.Item, {\n      label: \"Latitude\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, getFieldDecorator('latitude', {\n      rules: [{\n        type: 'number',\n        message: 'The input is not valid'\n      }, {\n        required: true,\n        message: 'Latitude is required!'\n      }]\n    })(React.createElement(InputNumber, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Longitude\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, getFieldDecorator('longitude', {\n      rules: [{\n        type: 'number',\n        message: 'The input is not valid'\n      }, {\n        required: true,\n        message: 'Longitude is required!'\n      }]\n    })(React.createElement(InputNumber, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Description\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, getFieldDecorator('description', {\n      rules: [{\n        type: 'string'\n      }, {\n        required: false,\n        message: 'Please input the longitude!'\n      }]\n    })(React.createElement(TextArea, {\n      rows: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Add\")));\n  }\n\n}\n\nconst WrappedAddProblemForm = Form.create({\n  name: 'register'\n})(AddProblemForm);\nexport default WrappedAddProblemForm;","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/components/addProblem.js"],"names":["React","Form","Input","Button","Select","InputNumber","Option","TextArea","AddProblemForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","preventDefault","props","form","validateFieldsAndScroll","err","values","newProblem","category","longitude","latitude","description","newPoint","console","log","fetch","method","body","JSON","stringify","headers","then","response","json","catch","error","resetFields","handleChange","value","handleConfirmBlur","target","setState","render","getFieldDecorator","formStyle","marginLeft","marginTop","width","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","type","message","WrappedAddProblemForm","create","name"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Select, InputNumber } from 'antd';\nconst { Option } = Select;\nconst { TextArea } = Input;\n\nclass AddProblemForm extends React.Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n  \n    handleSubmit = e => {\n      e.preventDefault();\n      this.props.form.validateFieldsAndScroll((err, values) => {\n        if (!err) {\n          const newProblem = {\n            category: values.category,\n            longitude: values.longitude,\n            latitude: values.latitude,\n            description: values.description\n        };\n          const newPoint = {\n            latitude: values.latitude,\n            longitude: values.longitude\n          }\n        console.log(newProblem);\n        fetch(\"http://localhost:3001/add_problem\", {\n            method: 'POST',\n            body: JSON.stringify(newProblem),\n            headers: {\n                'Content-Type': 'application/x-www-form-urlencoded',\n                },\n        }).then(response => response.json())\n        .then(response => {console.log('response: ', response)})\n        .then(() => {\n        fetch(\"http://localhost:3001/add_point\", {\n          method: 'POST',\n          body: JSON.stringify(newPoint),\n          headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              },\n        })})\n        .then(response => {\n          console.log(\"resp: \", response);\n          response.json()})\n        .then(response => {console.log('response: ', response)})\n        .catch(error => console.log('error:', error));\n      }\n      this.props.form.resetFields();\n      })};\n\n    handleChange = (value) => {\n        console.log(`selected ${value}`);\n    };\n\n    handleConfirmBlur = e => {\n      const { value } = e.target;\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n    \n    render() {\n      const { getFieldDecorator } = this.props.form;\n      const formStyle = {\n          marginLeft: '20%',\n          marginTop: '3%',\n          width: '50%'\n      }\n  \n      const formItemLayout = {\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 8 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n      };\n      const tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0,\n          },\n          sm: {\n            span: 16,\n            offset: 8,\n          },\n        },\n      };\n       return (\n        <Form {...formItemLayout} onSubmit={this.handleSubmit} className='form' style={formStyle}>\n             <Form.Item label={<span>Category</span>}>\n             {getFieldDecorator('category', {\n              rules: [\n                {\n                  required: true,\n                },\n              ],\n            })(<Select style={{ width: '100%' }} onChange={this.handleChange}>\n                <Option value=\"Garbage disposal is not done on time\">Garbage disposal is not done on time</Option>\n                <Option value=\"Trash has no lid\">Trash has no lid</Option>\n                <Option value=\"Trash is placed in the wrong place\">Trash is placed in the wrong place</Option>\n            </Select>)}\n          </Form.Item>\n          <Form.Item label=\"Latitude\">\n            {getFieldDecorator('latitude', {\n              rules: [\n                {\n                  type: 'number',\n                  message: 'The input is not valid',\n                },\n                {\n                  required: true,\n                  message: 'Latitude is required!',\n                },\n              ],\n            })(<InputNumber style={{width: '100%'}} />)}\n          </Form.Item>\n          <Form.Item label=\"Longitude\">\n            {getFieldDecorator('longitude', {\n              rules: [\n                {\n                  type: 'number',\n                  message: 'The input is not valid',\n                },\n                {\n                  required: true,\n                  message: 'Longitude is required!',\n                },\n              ],\n            })(<InputNumber style={{width: '100%'}}/>)}\n          </Form.Item>   \n          <Form.Item label=\"Description\">\n            {getFieldDecorator('description', {\n              rules: [\n                {\n                  type: 'string',\n                },\n                {\n                  required: false,\n                  message: 'Please input the longitude!',\n                },\n              ],\n            })(<TextArea rows={4} />)}\n          </Form.Item>         \n         <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Add\n            </Button>\n          </Form.Item>\n        </Form>\n      );\n    }\n  }\n  \nconst WrappedAddProblemForm = Form.create({ name: 'register' })(AddProblemForm);\nexport default WrappedAddProblemForm;"]},"metadata":{},"sourceType":"module"}