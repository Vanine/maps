{"ast":null,"code":"var _jsxFileName = \"/home/vanine/Desktop/maps/frontend/src/components/mapContainer.js\";\nimport React from 'react';\nimport { GoogleApiWrapper, Marker, GoogleAPI, google, maps } from 'google-maps-react';\nimport Circle from 'google-maps-react';\nimport GoogleMapReact from 'google-maps-react';\nimport GoogleMap from 'google-map-react';\nimport CustomMarker from './marker';\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport '../App.css'; // const AnyReactComponent = ({ text }) => <div style={{\n//   color: 'white', \n//   background: 'grey',\n//   padding: '15px 10px',\n//   display: 'inline-flex',\n//   textAlign: 'center',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   borderRadius: '100%',\n//   transform: 'translate(-50%, -50%)'\n// }}>\n//   {text}\n// </div>;\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFetch = () => {\n      fetch(\"http://localhost:3001/points\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }).then(response => response.json()).then(response => {\n        this.props.setPoints({\n          points: response.points\n        });\n        console.log(response);\n      }).catch(error => console.log('error:', error));\n    };\n\n    this.displayMarkers = () => {\n      return this.props.points.map((point, index) => {\n        console.log(point, index);\n        return React.createElement(Circle, {\n          key: index,\n          defaultCenter: {\n            lat: 4,\n            lng: 4\n          },\n          center: {\n            lat: 4,\n            lng: 4\n          },\n          radius: 5000,\n          options: {\n            fillColor: 'red',\n            strokeColor: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.handleFetch();\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentWillUpdate\");\n    console.log(\"this.props.points: \", this.props.points);\n  }\n\n  // key={index}\n  // center={{latitude: 4,longitude: 4}}\n  // radius={1000}\n  // options={{\n  //     strokeColor: \"#66009a\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: `#66009a`,\n  //     fillOpacity: 0.35,\n  //     zIndex: 1\n  // }}\n  render() {\n    const mapStyles = {\n      width: '100%',\n      height: '100vh'\n    };\n    return React.createElement(GoogleMapReact, {\n      google: this.props.google,\n      zoom: 8,\n      style: mapStyles,\n      initialCenter: {\n        lat: 4,\n        lng: 5\n      },\n      onGoogleApiLoaded: ({\n        map,\n        maps\n      }) => new google.maps.Circle({\n        strokeColor: 'red',\n        strokeOpacity: 0.8,\n        strokeWeight: 2,\n        fillColor: 'red',\n        fillOpacity: 0.3,\n        map,\n        center: {\n          lat: 4,\n          lng: 4\n        },\n        radius: 10000\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default connect(state => ({\n  points: state.points\n}), dispatch => ({\n  addPoint: data => {\n    dispatch(addPoint(data));\n  },\n  setPoints: data => {\n    dispatch(setPoints(data));\n  }\n}))(GoogleApiWrapper({\n  apiKey: 'AIzaSyCR1rxt8xnpURsVA3bDm8eukPy4EmW9icQ'\n})(MapContainer));","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/components/mapContainer.js"],"names":["React","GoogleApiWrapper","Marker","GoogleAPI","google","maps","Circle","GoogleMapReact","GoogleMap","CustomMarker","connect","addPoint","setPoints","MapContainer","Component","constructor","props","handleFetch","fetch","method","headers","then","response","json","points","console","log","catch","error","displayMarkers","map","point","index","lat","lng","fillColor","strokeColor","componentDidUpdate","render","mapStyles","width","height","strokeOpacity","strokeWeight","fillOpacity","center","radius","state","dispatch","data","apiKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { GoogleApiWrapper, Marker, GoogleAPI, google, maps } from 'google-maps-react';\nimport Circle from 'google-maps-react';\nimport GoogleMapReact from 'google-maps-react';\nimport GoogleMap from 'google-map-react';\nimport CustomMarker from './marker';\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport '../App.css';\n// const AnyReactComponent = ({ text }) => <div style={{\n//   color: 'white', \n//   background: 'grey',\n//   padding: '15px 10px',\n//   display: 'inline-flex',\n//   textAlign: 'center',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   borderRadius: '100%',\n//   transform: 'translate(-50%, -50%)'\n// }}>\n//   {text}\n// </div>;\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFetch();\n  }\n  handleFetch = () => {\n    fetch(\"http://localhost:3001/points\",  {\n      method: 'GET',\n      headers: {\n         'Content-Type': 'application/x-www-form-urlencoded',\n      },\n  }).then(response => response.json())\n  .then(response => {\n    this.props.setPoints({points: response.points});\n    console.log(response);\n  })\n  .catch(error => console.log('error:', error)); \n}\ncomponentDidUpdate() {\n  console.log(\"componentWillUpdate\");\n  console.log(\"this.props.points: \", this.props.points);\n}\n\ndisplayMarkers = () => {\n    return this.props.points.map((point, index) => {\n    console.log(point, index)\n    return  <Circle\n    key={index}\n    defaultCenter={{lat: 4,lng: 4}}\n     center={{lat: 4,lng: 4}}\n    radius={5000}\n     options={{\n     fillColor: 'red',\n     strokeColor: 'red',\n   }}\n    />})}\n    // key={index}\n    // center={{latitude: 4,longitude: 4}}\n    // radius={1000}\n    // options={{\n    //     strokeColor: \"#66009a\",\n    //     strokeOpacity: 0.8,\n    //     strokeWeight: 2,\n    //     fillColor: `#66009a`,\n    //     fillOpacity: 0.35,\n    //     zIndex: 1\n    // }}\n\n  render() {\n    const mapStyles = {\n      width: '100%',\n      height: '100vh',\n    };\n    \n    return (\n      <GoogleMapReact\n      google={this.props.google}\n      zoom={8}\n      style={mapStyles}\n      initialCenter={{ lat: 4, lng: 5}}\n      onGoogleApiLoaded={({map, maps}) =>\n        new google.maps.Circle({\n          strokeColor: 'red',\n          strokeOpacity: 0.8,\n          strokeWeight: 2,\n          fillColor: 'red',\n          fillOpacity: 0.3,\n          map,\n          center: {lat: 4,lng: 4},\n          radius: 10000,\n        })}\n      >\n      {/* {this.displayMarkers()} */}\n      </GoogleMapReact>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    points: state.points,\n    }),\n  dispatch => ({\n    addPoint: (data => {\n      dispatch(addPoint(data))\n    }),\n    setPoints: ((data) => {\n      dispatch(setPoints(data))\n    }),\n}))(GoogleApiWrapper({\n  apiKey: 'AIzaSyCR1rxt8xnpURsVA3bDm8eukPy4EmW9icQ'\n})(MapContainer));\n"]},"metadata":{},"sourceType":"module"}