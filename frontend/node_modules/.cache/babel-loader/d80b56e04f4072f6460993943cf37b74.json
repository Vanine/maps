{"ast":null,"code":"var _jsxFileName = \"/home/vanine/Desktop/maps/frontend/src/components/addProblem.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button } from 'antd';\n\nclass RegistrationForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {//     e.preventDefault();\n      //   this.props.form.validateFieldsAndScroll((err, values) => {\n      //     if (!err) {\n      //       const newUser = {\n      //         name: values.nickname,\n      //         email: values.email,\n      //         number: values.phone,\n      //         password: values.password\n      //     };\n      //     console.log(newUser);\n      //     if (this.props.handleCancel) {\n      //       this.props.handleCancel();\n      //     }\n      //     fetch(\"/api/signup\", {\n      //         method: 'POST',\n      //         body: JSON.stringify(newUser),\n      //         headers: {\n      //             'Content-Type': 'application/x-www-form-urlencoded',\n      //             },\n      //     }).then(response => response.json())\n      //     .then(response => {console.log('response: ', response);\n      //    if(!this.props.handleRegister) { this.props.history.push({\n      //       pathname: 'message',\n      //       state: {message: response.message}\n      //     })}\n      //   else {\n      //     this.props.handleRegister(newUser)\n      //   }})\n      //     .catch(error => console.log('error:', error));\n      //     }\n      //   });\n      //   this.props.form.resetFields();\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n\n    this.compareToFirstPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n\n    this.validateToNextPassword = (rule, value, callback) => {\n      const form = this.props.form;\n\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], {\n          force: true\n        });\n      }\n\n      callback();\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formStyle = {\n      marginLeft: '20%',\n      marginTop: '10%',\n      width: '50%'\n    };\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return React.createElement(Form, Object.assign({}, formItemLayout, {\n      onSubmit: this.handleSubmit,\n      className: \"form\",\n      style: formStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), React.createElement(Form.Item, {\n      label: React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Name\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, getFieldDecorator('nickname', {\n      rules: [{\n        required: true,\n        message: 'Please input your name!',\n        whitespace: true\n      }, {\n        min: 6,\n        message: 'Name can contain at least 6 characters!'\n      }, {\n        max: 30,\n        message: 'Name can contain up to 30 characters!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"E-mail\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, getFieldDecorator('email', {\n      rules: [{\n        type: 'email',\n        message: 'The input is not valid E-mail!'\n      }, {\n        required: true,\n        message: 'Please input your E-mail!'\n      }]\n    })(React.createElement(Input, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Mobile Number\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, getFieldDecorator('phone', {\n      rules: [{\n        required: true,\n        message: 'Please input your mobile number!'\n      }, {\n        min: 9,\n        message: 'Please input correct mobile number!'\n      }, {\n        max: 9,\n        message: 'Please input correct mobile number!'\n      }]\n    })(React.createElement(Input, {\n      type: \"number\",\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Password\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, getFieldDecorator('password', {\n      rules: [{\n        required: true,\n        message: 'Please input your password!'\n      }, {\n        min: 6,\n        message: 'Password can contain at least 6 characters!'\n      }, {\n        max: 30,\n        message: 'Password can contain up to 30 characters!'\n      }, {\n        validator: this.validateToNextPassword\n      }]\n    })(React.createElement(Input.Password, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }))), React.createElement(Form.Item, {\n      label: \"Confirm Password\",\n      hasFeedback: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, getFieldDecorator('confirm', {\n      rules: [{\n        required: true,\n        message: 'Please confirm your password!'\n      }, {\n        validator: this.compareToFirstPassword\n      }]\n    })(React.createElement(Input.Password, {\n      onBlur: this.handleConfirmBlur,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }))), React.createElement(Form.Item, Object.assign({}, tailFormItemLayout, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }), React.createElement(Button, {\n      type: \"primary\",\n      htmlType: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Register\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), \"Already have an account? \", React.createElement(Link, {\n      to: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \" Sign in!\")));\n  }\n\n}\n\nconst WrappedRegistrationForm = Form.create({\n  name: 'register'\n})(RegistrationForm);\nconst WrappedRegistrationFormWithRouter = withRouter(WrappedRegistrationForm);\nexport default WrappedRegistrationFormWithRouter;","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/components/addProblem.js"],"names":["React","Form","Input","Button","RegistrationForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","handleConfirmBlur","value","target","setState","compareToFirstPassword","rule","callback","form","props","getFieldValue","validateToNextPassword","validateFields","force","render","getFieldDecorator","formStyle","marginLeft","marginTop","width","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","rules","required","message","whitespace","min","max","type","validator","WrappedRegistrationForm","create","name","WrappedRegistrationFormWithRouter","withRouter"],"mappings":"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","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button } from 'antd';\n\nclass RegistrationForm extends React.Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n  \n    handleSubmit = e => {\n    //     e.preventDefault();\n    //   this.props.form.validateFieldsAndScroll((err, values) => {\n    //     if (!err) {\n    //       const newUser = {\n    //         name: values.nickname,\n    //         email: values.email,\n    //         number: values.phone,\n    //         password: values.password\n    //     };\n    //     console.log(newUser);\n    //     if (this.props.handleCancel) {\n    //       this.props.handleCancel();\n    //     }\n    //     fetch(\"/api/signup\", {\n    //         method: 'POST',\n    //         body: JSON.stringify(newUser),\n    //         headers: {\n    //             'Content-Type': 'application/x-www-form-urlencoded',\n    //             },\n    //     }).then(response => response.json())\n    //     .then(response => {console.log('response: ', response);\n    //    if(!this.props.handleRegister) { this.props.history.push({\n    //       pathname: 'message',\n    //       state: {message: response.message}\n    //     })}\n    //   else {\n    //     this.props.handleRegister(newUser)\n    //   }})\n    //     .catch(error => console.log('error:', error));\n    //     }\n    //   });\n    //   this.props.form.resetFields();\n    };\n  \n    handleConfirmBlur = e => {\n      const { value } = e.target;\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n  \n    compareToFirstPassword = (rule, value, callback) => {\n      const { form } = this.props;\n      if (value && value !== form.getFieldValue('password')) {\n        callback('Two passwords that you enter is inconsistent!');\n      } else {\n        callback();\n      }\n    };\n  \n    validateToNextPassword = (rule, value, callback) => {\n      const { form } = this.props;\n      if (value && this.state.confirmDirty) {\n        form.validateFields(['confirm'], { force: true });\n      }\n      callback();\n    }; \n    \n    render() {\n      const { getFieldDecorator } = this.props.form;\n      const formStyle = {\n          marginLeft: '20%',\n          marginTop: '10%',\n          width: '50%'\n      }\n  \n      const formItemLayout = {\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 8 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n      };\n      const tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0,\n          },\n          sm: {\n            span: 16,\n            offset: 8,\n          },\n        },\n      };\n       return (\n        <Form {...formItemLayout} onSubmit={this.handleSubmit} className='form' style={formStyle}>\n             <Form.Item label={<span>Name</span>}>\n            {getFieldDecorator('nickname', {\n               rules: [\n               { required: true, message: 'Please input your name!', whitespace: true },\n               { min: 6, message: 'Name can contain at least 6 characters!' },\n               { max: 30, message: 'Name can contain up to 30 characters!' }\n            ],\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"E-mail\">\n            {getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!',\n                },\n                {\n                  required: true,\n                  message: 'Please input your E-mail!',\n                },\n              ],\n            })(<Input />)}\n          </Form.Item>\n          <Form.Item label=\"Mobile Number\">\n            {getFieldDecorator('phone', {\n              rules: [\n              { required: true, message: 'Please input your mobile number!' },\n              { min: 9, message: 'Please input correct mobile number!' },\n              { max: 9, message: 'Please input correct mobile number!' }\n            ],\n            })(<Input type='number' style={{ width: '100%' }}/>)}\n          </Form.Item>\n          <Form.Item label=\"Password\" >\n            {getFieldDecorator('password', {\n              rules: [\n                { required: true, message: 'Please input your password!' },\n                { min: 6, message: 'Password can contain at least 6 characters!' },\n                { max: 30, message: 'Password can contain up to 30 characters!' },\n                { validator: this.validateToNextPassword },\n              ],\n            })(<Input.Password />)}\n          </Form.Item>\n          <Form.Item label=\"Confirm Password\" hasFeedback>\n            {getFieldDecorator('confirm', {\n              rules: [\n                { required: true, message: 'Please confirm your password!'},\n                { validator: this.compareToFirstPassword },\n              ],\n            })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n          </Form.Item>\n         <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\">\n              Register\n            </Button>\n            <br />\n            Already have an account? <Link to=\"\"> Sign in!</Link>\n          </Form.Item>\n        </Form>\n      );\n    }\n  }\n  \n  const WrappedRegistrationForm = Form.create({ name: 'register' })(RegistrationForm);\n  const WrappedRegistrationFormWithRouter = withRouter(WrappedRegistrationForm);\n  \nexport default WrappedRegistrationFormWithRouter;"]},"metadata":{},"sourceType":"module"}