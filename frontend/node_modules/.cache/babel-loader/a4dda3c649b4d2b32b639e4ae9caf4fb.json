{"ast":null,"code":"import _objectSpread from \"/home/vanine/Desktop/maps/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { ADD_POINT, SET_POINTS, UPDATE_POINT } from '../actions/actionTypes';\nlet initialState = {\n  points: []\n};\nexport default function pointsList(state = initialState, action) {\n  if (action.type === ADD_POINT) {\n    return _objectSpread({}, state, {\n      points: [...state.points, action.payload]\n    });\n  } else if (action.type === SET_POINTS) {\n    return _objectSpread({}, state, {\n      points: [...state.points, ...action.payload.points]\n    });\n  } else if (action.type === UPDATE_POINT) {\n    [...state.points].find(point => {\n      if (point._id == action.payload._id) {\n        point.frequency++;\n      }\n    });\n    return _objectSpread({}, state, {\n      points: [...state.points]\n    });\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/reducers/reducer.js"],"names":["ADD_POINT","SET_POINTS","UPDATE_POINT","initialState","points","pointsList","state","action","type","payload","find","point","_id","frequency"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,UAApB,EAAgCC,YAAhC,QAAoD,wBAApD;AAEA,IAAIC,YAAY,GAAG;AACfC,EAAAA,MAAM,EAAE;AADO,CAAnB;AAGA,eAAe,SAASC,UAAT,CAAoBC,KAAK,GAAGH,YAA5B,EAA0CI,MAA1C,EAAkD;AAC7D,MAAIA,MAAM,CAACC,IAAP,KAAgBR,SAApB,EAA+B;AAC1B,6BACOM,KADP;AAEIF,MAAAA,MAAM,EAAE,CAAC,GAAGE,KAAK,CAACF,MAAV,EAAkBG,MAAM,CAACE,OAAzB;AAFZ;AAIJ,GALD,MAMK,IAAIF,MAAM,CAACC,IAAP,KAAgBP,UAApB,EAAgC;AACrC,6BACOK,KADP;AAEIF,MAAAA,MAAM,EAAE,CAAC,GAAGE,KAAK,CAACF,MAAV,EAAkB,GAAGG,MAAM,CAACE,OAAP,CAAeL,MAApC;AAFZ;AAIF,GALO,MAMD,IAAIG,MAAM,CAACC,IAAP,KAAgBN,YAApB,EAAkC;AACtC,KAAC,GAAGI,KAAK,CAACF,MAAV,EAAkBM,IAAlB,CAAuBC,KAAK,IAAI;AAC5B,UAAGA,KAAK,CAACC,GAAN,IAAaL,MAAM,CAACE,OAAP,CAAeG,GAA/B,EAAoC;AAClCD,QAAAA,KAAK,CAACE,SAAN;AACD;AACN,KAJC;AAKF,6BACOP,KADP;AAEIF,MAAAA,MAAM,EAAE,CAAC,GAAGE,KAAK,CAACF,MAAV;AAFZ;AAIE;;AACC,SAAOE,KAAP;AACJ","sourcesContent":["import { ADD_POINT, SET_POINTS, UPDATE_POINT } from '../actions/actionTypes';\n\nlet initialState = {\n    points: [],\n};\nexport default function pointsList(state = initialState, action) {\n    if (action.type === ADD_POINT) {\n         return {\n             ...state,\n             points: [...state.points, action.payload],\n         }\n    }\n    else if (action.type === SET_POINTS) {\n    return {\n        ...state,\n        points: [...state.points, ...action.payload.points],\n    }\n }\n   else if (action.type === UPDATE_POINT) {\n    [...state.points].find(point => {\n        if(point._id == action.payload._id) {\n          point.frequency++;\n        }\n  });\n  return {\n      ...state,\n      points: [...state.points]\n  };\n   }\n     return state;\n} "]},"metadata":{},"sourceType":"module"}