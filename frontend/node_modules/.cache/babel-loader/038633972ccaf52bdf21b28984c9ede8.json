{"ast":null,"code":"var _jsxFileName = \"/home/vanine/Desktop/maps/frontend/src/components/mapContainer.js\";\nimport React from 'react';\nimport { GoogleApiWrapper, Marker } from 'google-maps-react';\nimport GoogleMapReact from 'google-maps-react';\nimport CustomMarker from './marker';\nimport { Circle } from \"react-google-maps\";\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport GoogleMap from 'google-map-react';\nimport '../App.css'; // const AnyReactComponent = ({ text }) => <div style={{\n//   color: 'white', \n//   background: 'grey',\n//   padding: '15px 10px',\n//   display: 'inline-flex',\n//   textAlign: 'center',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   borderRadius: '100%',\n//   transform: 'translate(-50%, -50%)'\n// }}>\n//   {text}\n// </div>;\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFetch = () => {\n      fetch(\"http://localhost:3001/points\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }).then(response => response.json()).then(response => {\n        this.props.setPoints({\n          points: response.points\n        });\n        console.log(response);\n      }).catch(error => console.log('error:', error));\n    };\n\n    this.displayMarkers = () => {\n      return this.props.points.map((point, index) => {\n        console.log(point, index);\n        return React.createElement(CustomMarker, {\n          lat: point.latitude,\n          lng: point.longitude,\n          text: \"My Marker\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 53\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.handleFetch();\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentWillUpdate\");\n    console.log(\"this.props.points: \", this.props.points);\n  }\n\n  // key={index}\n  // center={{latitude: 4,longitude: 4}}\n  // radius={1000}\n  // options={{\n  //     strokeColor: \"#66009a\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: `#66009a`,\n  //     fillOpacity: 0.35,\n  //     zIndex: 1\n  // }}\n  render() {\n    const mapStyle = {\n      paddingTop: '20px',\n      width: '100%',\n      height: '100vh',\n      paddingLeft: '20px',\n      paddingRight: '20px'\n    };\n    return React.createElement(\"div\", {\n      style: mapStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(GoogleMap, {\n      bootstrapURLKeys: {\n        key: 'AIzaSyCR1rxt8xnpURsVA3bDm8eukPy4EmW9icQ'\n      },\n      zoom: 3,\n      center: {\n        lat: 4,\n        lng: 5\n      },\n      margin: [100, 100, 100, 200],\n      passive: true,\n      yesIWantToUseGoogleMapApiInternals: true,\n      defaultOptions: {\n        disableDefaultUI: true,\n        // disable default map UI\n        draggable: true,\n        // make map draggable\n        keyboardShortcuts: false,\n        // disable keyboard shortcuts\n        scaleControl: true,\n        // allow scale controle\n        scrollwheel: true // allow scroll wheel\n\n      } // onGoogleApiLoaded={({map, maps}) =>\n      //   new maps.Circle({\n      //     strokeColor: 'red',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: 'red',\n      //     fillOpacity: 0.3,\n      //     map,\n      //     center: {lat: 4,lng: 4},\n      //     radius: 10000,\n      //   })}\n      ,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.displayMarkers()));\n  }\n\n}\n\nexport default connect(state => ({\n  points: state.points\n}), dispatch => ({\n  addPoint: data => {\n    dispatch(addPoint(data));\n  },\n  setPoints: data => {\n    dispatch(setPoints(data));\n  }\n}))(MapContainer);","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/components/mapContainer.js"],"names":["React","GoogleApiWrapper","Marker","GoogleMapReact","CustomMarker","Circle","connect","addPoint","setPoints","GoogleMap","MapContainer","Component","constructor","props","handleFetch","fetch","method","headers","then","response","json","points","console","log","catch","error","displayMarkers","map","point","index","latitude","longitude","componentDidUpdate","render","mapStyle","paddingTop","width","height","paddingLeft","paddingRight","key","lat","lng","disableDefaultUI","draggable","keyboardShortcuts","scaleControl","scrollwheel","state","dispatch","data"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { GoogleApiWrapper, Marker } from 'google-maps-react';\nimport GoogleMapReact from 'google-maps-react';\nimport CustomMarker from './marker';\nimport { Circle } from \"react-google-maps\";\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport GoogleMap from 'google-map-react';\n\nimport '../App.css';\n// const AnyReactComponent = ({ text }) => <div style={{\n//   color: 'white', \n//   background: 'grey',\n//   padding: '15px 10px',\n//   display: 'inline-flex',\n//   textAlign: 'center',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   borderRadius: '100%',\n//   transform: 'translate(-50%, -50%)'\n// }}>\n//   {text}\n// </div>;\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFetch();\n  }\n  \n  handleFetch = () => {\n    fetch(\"http://localhost:3001/points\",  {\n      method: 'GET',\n      headers: {\n         'Content-Type': 'application/x-www-form-urlencoded',\n      },\n  }).then(response => response.json())\n  .then(response => {\n    this.props.setPoints({points: response.points});\n    console.log(response);\n  })\n  .catch(error => console.log('error:', error)); \n}\ncomponentDidUpdate() {\n  console.log(\"componentWillUpdate\");\n  console.log(\"this.props.points: \", this.props.points);\n}\n\ndisplayMarkers = () => {\n    return this.props.points.map((point, index) => {\n    console.log(point, index)\n    return  <CustomMarker\n    lat={point.latitude}\n    lng={point.longitude}\n    text=\"My Marker\"\n  />})}\n    // key={index}\n    // center={{latitude: 4,longitude: 4}}\n    // radius={1000}\n    // options={{\n    //     strokeColor: \"#66009a\",\n    //     strokeOpacity: 0.8,\n    //     strokeWeight: 2,\n    //     fillColor: `#66009a`,\n    //     fillOpacity: 0.35,\n    //     zIndex: 1\n    // }}\n\n  render() {\n    const mapStyle = {\n      paddingTop: '20px',\n      width: '100%',\n      height: '100vh',\n      paddingLeft: '20px',\n      paddingRight: '20px',\n\n    };\n    \n    return (\n      <div style={mapStyle}>\n      <GoogleMap\n      bootstrapURLKeys={{key: 'AIzaSyCR1rxt8xnpURsVA3bDm8eukPy4EmW9icQ'}}\n      zoom={3}\n      center={{ lat: 4, lng: 5}}\n      margin={[100, 100, 100, 200]}\n      passive={true}\n      \n      yesIWantToUseGoogleMapApiInternals\n      defaultOptions={{\n        disableDefaultUI: true, // disable default map UI\n        draggable: true, // make map draggable\n        keyboardShortcuts: false, // disable keyboard shortcuts\n        scaleControl: true, // allow scale controle\n        scrollwheel: true, // allow scroll wheel\n        \n      }}\n      // onGoogleApiLoaded={({map, maps}) =>\n      //   new maps.Circle({\n      //     strokeColor: 'red',\n      //     strokeOpacity: 0.8,\n      //     strokeWeight: 2,\n      //     fillColor: 'red',\n      //     fillOpacity: 0.3,\n      //     map,\n      //     center: {lat: 4,lng: 4},\n      //     radius: 10000,\n      //   })}\n        \n      >\n      {this.displayMarkers()}\n      </GoogleMap>\n      </div>\n     \n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    points: state.points,\n    }),\n  dispatch => ({\n    addPoint: (data => {\n      dispatch(addPoint(data))\n    }),\n    setPoints: ((data) => {\n      dispatch(setPoints(data))\n    }),\n}))(MapContainer)\n"]},"metadata":{},"sourceType":"module"}