{"ast":null,"code":"import _toConsumableArray from\"/home/vanine/Desktop/maps/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/home/vanine/Desktop/maps/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{ADD_POINT,SET_POINTS,UPDATE_POINT}from'../actions/actionTypes';var initialState={points:[]};export default function pointsList(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;if(action.type===ADD_POINT){action.payload.frequency=1;return _objectSpread({},state,{points:[].concat(_toConsumableArray(state.points),[action.payload])});}else if(action.type===SET_POINTS){return _objectSpread({},state,{points:[].concat(_toConsumableArray(state.points),_toConsumableArray(action.payload.points))});}else if(action.type===UPDATE_POINT){_toConsumableArray(state.points).find(function(point){if(point.latitude==action.payload.latitude&&point.longitude==action.payload.longitude){point.frequency++;}});return _objectSpread({},state,{points:_toConsumableArray(state.points)});}return state;}","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/reducers/reducer.js"],"names":["ADD_POINT","SET_POINTS","UPDATE_POINT","initialState","points","pointsList","state","action","type","payload","frequency","find","point","latitude","longitude"],"mappings":"iPAAA,OAASA,SAAT,CAAoBC,UAApB,CAAgCC,YAAhC,KAAoD,wBAApD,CAEA,GAAIC,CAAAA,YAAY,CAAG,CACfC,MAAM,CAAE,EADO,CAAnB,CAGA,cAAe,SAASC,CAAAA,UAAT,EAAkD,IAA9BC,CAAAA,KAA8B,2DAAtBH,YAAsB,IAARI,CAAAA,MAAQ,2CAC7D,GAAIA,MAAM,CAACC,IAAP,GAAgBR,SAApB,CAA+B,CAC3BO,MAAM,CAACE,OAAP,CAAeC,SAAf,CAA2B,CAA3B,CACC,wBACOJ,KADP,EAEIF,MAAM,8BAAME,KAAK,CAACF,MAAZ,GAAoBG,MAAM,CAACE,OAA3B,EAFV,GAIJ,CAND,IAOK,IAAIF,MAAM,CAACC,IAAP,GAAgBP,UAApB,CAAgC,CACrC,wBACOK,KADP,EAEIF,MAAM,8BAAME,KAAK,CAACF,MAAZ,qBAAuBG,MAAM,CAACE,OAAP,CAAeL,MAAtC,EAFV,GAIF,CALO,IAMD,IAAIG,MAAM,CAACC,IAAP,GAAgBN,YAApB,CAAkC,CACtC,mBAAII,KAAK,CAACF,MAAV,EAAkBO,IAAlB,CAAuB,SAAAC,KAAK,CAAI,CAC5B,GAAGA,KAAK,CAACC,QAAN,EAAkBN,MAAM,CAACE,OAAP,CAAeI,QAAjC,EAA6CD,KAAK,CAACE,SAAN,EAAmBP,MAAM,CAACE,OAAP,CAAeK,SAAlF,CAA6F,CAC3FF,KAAK,CAACF,SAAN,GACD,CACN,CAJC,EAKF,wBACOJ,KADP,EAEIF,MAAM,oBAAME,KAAK,CAACF,MAAZ,CAFV,GAIE,CACC,MAAOE,CAAAA,KAAP,CACJ","sourcesContent":["import { ADD_POINT, SET_POINTS, UPDATE_POINT } from '../actions/actionTypes';\n\nlet initialState = {\n    points: [],\n};\nexport default function pointsList(state = initialState, action) {\n    if (action.type === ADD_POINT) {\n        action.payload.frequency = 1;\n         return {\n             ...state,\n             points: [...state.points, action.payload],\n         }\n    }\n    else if (action.type === SET_POINTS) {\n    return {\n        ...state,\n        points: [...state.points, ...action.payload.points],\n    }\n }\n   else if (action.type === UPDATE_POINT) {\n    [...state.points].find(point => {\n        if(point.latitude == action.payload.latitude && point.longitude == action.payload.longitude) {\n          point.frequency++;\n        }\n  });\n  return {\n      ...state,\n      points: [...state.points]\n  };\n   }\n     return state;\n} "]},"metadata":{},"sourceType":"module"}