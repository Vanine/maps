{"ast":null,"code":"var _jsxFileName = \"/home/vanine/Desktop/maps/frontend/src/components/mapContainer.js\";\nimport React from 'react';\nimport { GoogleApiWrapper, Marker, GoogleAPI, google, maps } from 'google-maps-react';\nimport Circle from 'google-maps-react';\nimport GoogleMapReact from 'google-maps-react';\nimport CustomMarker from './marker';\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport '../App.css'; // const AnyReactComponent = ({ text }) => <div style={{\n//   color: 'white', \n//   background: 'grey',\n//   padding: '15px 10px',\n//   display: 'inline-flex',\n//   textAlign: 'center',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   borderRadius: '100%',\n//   transform: 'translate(-50%, -50%)'\n// }}>\n//   {text}\n// </div>;\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFetch = () => {\n      fetch(\"http://localhost:3001/points\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        }\n      }).then(response => response.json()).then(response => {\n        this.props.getPoints({\n          points: response.points\n        });\n        console.log(response);\n      }).catch(error => console.log('error:', error));\n    };\n\n    this.displayMarkers = () => {\n      return this.props.points.map((point, index) => {\n        console.log(\"mtavvvv\");\n        console.log(point, index);\n        return React.createElement(Circle, {\n          strokeColor: \"red\",\n          strokeOpacity: \"0.8\",\n          strokeWeight: \"2\",\n          fillColor: \"#FF0000\",\n          fillOpacity: \"0.3\",\n          center: {\n            lat: point.latitude,\n            lng: point.longitude\n          },\n          radius: \"275\",\n          defaultCenter: {\n            lat: point.latitude,\n            lng: point.longitude\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 51\n          },\n          __self: this\n        });\n      });\n    };\n\n    this.handleFetch();\n  }\n\n  componentDidUpdate() {\n    console.log(\"componentWillUpdate\");\n    console.log(\"this.props.points: \", this.props.points);\n  }\n\n  // key={index}\n  // center={{latitude: 4,longitude: 4}}\n  // radius={1000}\n  // options={{\n  //     strokeColor: \"#66009a\",\n  //     strokeOpacity: 0.8,\n  //     strokeWeight: 2,\n  //     fillColor: `#66009a`,\n  //     fillOpacity: 0.35,\n  //     zIndex: 1\n  // }}\n  render() {\n    const mapStyles = {\n      width: '100%',\n      height: '100vh'\n    };\n    return React.createElement(GoogleMapReact, {\n      google: this.props.google,\n      zoom: 8,\n      style: mapStyles,\n      initialCenter: {\n        lat: 4,\n        lng: 5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, this.displayMarkers());\n  }\n\n}\n\nexport default connect(state => ({\n  points: state.points\n}), dispatch => ({\n  addPoint: data => {\n    dispatch(addPoint(data));\n  },\n  getPoints: data => {\n    dispatch(setPoints(data));\n  }\n}))(GoogleApiWrapper({\n  apiKey: 'AIzaSyCR1rxt8xnpURsVA3bDm8eukPy4EmW9icQ'\n})(MapContainer));","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/components/mapContainer.js"],"names":["React","GoogleApiWrapper","Marker","GoogleAPI","google","maps","Circle","GoogleMapReact","CustomMarker","connect","addPoint","setPoints","MapContainer","Component","constructor","props","handleFetch","fetch","method","headers","then","response","json","getPoints","points","console","log","catch","error","displayMarkers","map","point","index","lat","latitude","lng","longitude","componentDidUpdate","render","mapStyles","width","height","state","dispatch","data","apiKey"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { GoogleApiWrapper, Marker, GoogleAPI, google, maps } from 'google-maps-react';\nimport Circle from 'google-maps-react';\nimport GoogleMapReact from 'google-maps-react';\nimport CustomMarker from './marker';\nimport { connect } from \"react-redux\";\nimport { addPoint } from '../actions/addpoint';\nimport { setPoints } from '../actions/setpoints';\nimport '../App.css';\n// const AnyReactComponent = ({ text }) => <div style={{\n//   color: 'white', \n//   background: 'grey',\n//   padding: '15px 10px',\n//   display: 'inline-flex',\n//   textAlign: 'center',\n//   alignItems: 'center',\n//   justifyContent: 'center',\n//   borderRadius: '100%',\n//   transform: 'translate(-50%, -50%)'\n// }}>\n//   {text}\n// </div>;\n\nclass MapContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleFetch();\n  }\n  handleFetch = () => {\n    fetch(\"http://localhost:3001/points\",  {\n      method: 'GET',\n      headers: {\n         'Content-Type': 'application/x-www-form-urlencoded',\n      },\n  }).then(response => response.json())\n  .then(response => {\n    this.props.getPoints({points: response.points});\n    console.log(response);\n  })\n  .catch(error => console.log('error:', error)); \n}\ncomponentDidUpdate() {\n  console.log(\"componentWillUpdate\");\n  console.log(\"this.props.points: \", this.props.points);\n}\n\ndisplayMarkers = () => {\n    return this.props.points.map((point, index) => {\n    console.log(\"mtavvvv\");\n    console.log(point, index)\n    return  (<Circle\n      strokeColor= 'red'\n      strokeOpacity= '0.8'\n      strokeWeight= '2'\n      fillColor= '#FF0000'\n      fillOpacity= '0.3'\n      center= {{lat: point.latitude, lng: point.longitude}}\n      radius= '275'\n      defaultCenter={{\n        lat: point.latitude,\n        lng: point.longitude\n      }}\n    />)})}\n    // key={index}\n    // center={{latitude: 4,longitude: 4}}\n    // radius={1000}\n    // options={{\n    //     strokeColor: \"#66009a\",\n    //     strokeOpacity: 0.8,\n    //     strokeWeight: 2,\n    //     fillColor: `#66009a`,\n    //     fillOpacity: 0.35,\n    //     zIndex: 1\n    // }}\n\n  render() {\n    const mapStyles = {\n      width: '100%',\n      height: '100vh',\n    };\n    \n    return (\n      <GoogleMapReact\n      google={this.props.google}\n      zoom={8}\n      style={mapStyles}\n      initialCenter={{ lat: 4, lng: 5}}\n      >\n      {this.displayMarkers()}\n      </GoogleMapReact>\n    )\n  }\n}\n\nexport default connect(\n  state => ({\n    points: state.points,\n    }),\n  dispatch => ({\n    addPoint: (data => {\n      dispatch(addPoint(data))\n    }),\n    getPoints: ((data) => {\n      dispatch(setPoints(data))\n    }),\n}))(GoogleApiWrapper({\n  apiKey: 'AIzaSyCR1rxt8xnpURsVA3bDm8eukPy4EmW9icQ'\n})(MapContainer));\n"]},"metadata":{},"sourceType":"module"}