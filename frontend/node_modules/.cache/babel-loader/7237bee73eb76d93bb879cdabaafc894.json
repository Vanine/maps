{"ast":null,"code":"var _jsxFileName = \"/home/vanine/Desktop/maps/frontend/src/components/addProblem.js\";\nimport React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button } from 'antd';\n\nclass AddProblemForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      confirmDirty: false,\n      autoCompleteResult: []\n    };\n\n    this.handleSubmit = e => {//     e.preventDefault();\n      //   this.props.form.validateFieldsAndScroll((err, values) => {\n      //     if (!err) {\n      //       const newUser = {\n      //         name: values.nickname,\n      //         email: values.email,\n      //         number: values.phone,\n      //         password: values.password\n      //     };\n      //     console.log(newUser);\n      //     if (this.props.handleCancel) {\n      //       this.props.handleCancel();\n      //     }\n      //     fetch(\"/api/signup\", {\n      //         method: 'POST',\n      //         body: JSON.stringify(newUser),\n      //         headers: {\n      //             'Content-Type': 'application/x-www-form-urlencoded',\n      //             },\n      //     }).then(response => response.json())\n      //     .then(response => {console.log('response: ', response);\n      //    if(!this.props.handleRegister) { this.props.history.push({\n      //       pathname: 'message',\n      //       state: {message: response.message}\n      //     })}\n      //   else {\n      //     this.props.handleRegister(newUser)\n      //   }})\n      //     .catch(error => console.log('error:', error));\n      //     }\n      //   });\n      //   this.props.form.resetFields();\n    };\n\n    this.handleConfirmBlur = e => {\n      const value = e.target.value;\n      this.setState({\n        confirmDirty: this.state.confirmDirty || !!value\n      });\n    };\n  }\n\n  render() {\n    const getFieldDecorator = this.props.form.getFieldDecorator;\n    const formStyle = {//   marginLeft: '20%',\n      //   marginTop: '10%',\n      //   width: '50%'\n    };\n    const formItemLayout = {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 8\n        }\n      },\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 16\n        }\n      }\n    };\n    const tailFormItemLayout = {\n      wrapperCol: {\n        xs: {\n          span: 24,\n          offset: 0\n        },\n        sm: {\n          span: 16,\n          offset: 8\n        }\n      }\n    };\n    return (// <Form {...formItemLayout} onSubmit={this.handleSubmit} className='form' style={formStyle}>\n      //      <Form.Item label={<span>Name</span>}>\n      //     {getFieldDecorator('nickname', {\n      //        rules: [\n      //        { required: true, message: 'Please input your name!', whitespace: true },\n      //        { min: 6, message: 'Name can contain at least 6 characters!' },\n      //        { max: 30, message: 'Name can contain up to 30 characters!' }\n      //     ],\n      //     })(<Input />)}\n      //   </Form.Item>\n      //   <Form.Item label=\"E-mail\">\n      //     {getFieldDecorator('email', {\n      //       rules: [\n      //         {\n      //           type: 'email',\n      //           message: 'The input is not valid E-mail!',\n      //         },\n      //         {\n      //           required: true,\n      //           message: 'Please input your E-mail!',\n      //         },\n      //       ],\n      //     })(<Input />)}\n      //   </Form.Item>\n      //   <Form.Item label=\"Mobile Number\">\n      //     {getFieldDecorator('phone', {\n      //       rules: [\n      //       { required: true, message: 'Please input your mobile number!' },\n      //       { min: 9, message: 'Please input correct mobile number!' },\n      //       { max: 9, message: 'Please input correct mobile number!' }\n      //     ],\n      //     })(<Input type='number' style={{ width: '100%' }}/>)}\n      //   </Form.Item>\n      //   <Form.Item label=\"Password\" >\n      //     {getFieldDecorator('password', {\n      //       rules: [\n      //         { required: true, message: 'Please input your password!' },\n      //         { min: 6, message: 'Password can contain at least 6 characters!' },\n      //         { max: 30, message: 'Password can contain up to 30 characters!' },\n      //         { validator: this.validateToNextPassword },\n      //       ],\n      //     })(<Input.Password />)}\n      //   </Form.Item>\n      //   <Form.Item label=\"Confirm Password\" hasFeedback>\n      //     {getFieldDecorator('confirm', {\n      //       rules: [\n      //         { required: true, message: 'Please confirm your password!'},\n      //         { validator: this.compareToFirstPassword },\n      //       ],\n      //     })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n      //   </Form.Item>\n      //  <Form.Item {...tailFormItemLayout}>\n      //     <Button type=\"primary\" htmlType=\"submit\">\n      //       Register\n      //     </Button>\n      //     <br />\n      //   </Form.Item>\n      // </Form>\n      React.createElement(\"input\", {\n        type: \"number\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      })\n    );\n  }\n\n}\n\nconst WrappedAddProblemForm = Form.create({\n  name: 'register'\n})(AddProblemForm);\nexport default WrappedAddProblemForm;","map":{"version":3,"sources":["/home/vanine/Desktop/maps/frontend/src/components/addProblem.js"],"names":["React","Form","Input","Button","AddProblemForm","Component","state","confirmDirty","autoCompleteResult","handleSubmit","e","handleConfirmBlur","value","target","setState","render","getFieldDecorator","props","form","formStyle","formItemLayout","labelCol","xs","span","sm","wrapperCol","tailFormItemLayout","offset","WrappedAddProblemForm","create","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,QAAoC,MAApC;;AAEA,MAAMC,cAAN,SAA6BJ,KAAK,CAACK,SAAnC,CAA6C;AAAA;AAAA;AAAA,SACzCC,KADyC,GACjC;AACNC,MAAAA,YAAY,EAAE,KADR;AAENC,MAAAA,kBAAkB,EAAE;AAFd,KADiC;;AAAA,SAMzCC,YANyC,GAM1BC,CAAC,IAAI,CACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,KAvCwC;;AAAA,SAyCzCC,iBAzCyC,GAyCrBD,CAAC,IAAI;AAAA,YACfE,KADe,GACLF,CAAC,CAACG,MADG,CACfD,KADe;AAEvB,WAAKE,QAAL,CAAc;AAAEP,QAAAA,YAAY,EAAE,KAAKD,KAAL,CAAWC,YAAX,IAA2B,CAAC,CAACK;AAA7C,OAAd;AACD,KA5CwC;AAAA;;AA8CzCG,EAAAA,MAAM,GAAG;AAAA,UACCC,iBADD,GACuB,KAAKC,KAAL,CAAWC,IADlC,CACCF,iBADD;AAEP,UAAMG,SAAS,GAAG,CAChB;AACA;AACA;AAHgB,KAAlB;AAMA,UAAMC,cAAc,GAAG;AACrBC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADI;AAERC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFI,OADW;AAKrBE,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AAAEC,UAAAA,IAAI,EAAE;AAAR,SADM;AAEVC,QAAAA,EAAE,EAAE;AAAED,UAAAA,IAAI,EAAE;AAAR;AAFM;AALS,KAAvB;AAUA,UAAMG,kBAAkB,GAAG;AACzBD,MAAAA,UAAU,EAAE;AACVH,QAAAA,EAAE,EAAE;AACFC,UAAAA,IAAI,EAAE,EADJ;AAEFI,UAAAA,MAAM,EAAE;AAFN,SADM;AAKVH,QAAAA,EAAE,EAAE;AACFD,UAAAA,IAAI,EAAE,EADJ;AAEFI,UAAAA,MAAM,EAAE;AAFN;AALM;AADa,KAA3B;AAYC,WACC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA3DD;AA6DF;;AAzIwC;;AA4I3C,MAAMC,qBAAqB,GAAG3B,IAAI,CAAC4B,MAAL,CAAY;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAZ,EAAkC1B,cAAlC,CAA9B;AAEF,eAAewB,qBAAf","sourcesContent":["import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button } from 'antd';\n\nclass AddProblemForm extends React.Component {\n    state = {\n      confirmDirty: false,\n      autoCompleteResult: [],\n    };\n  \n    handleSubmit = e => {\n    //     e.preventDefault();\n    //   this.props.form.validateFieldsAndScroll((err, values) => {\n    //     if (!err) {\n    //       const newUser = {\n    //         name: values.nickname,\n    //         email: values.email,\n    //         number: values.phone,\n    //         password: values.password\n    //     };\n    //     console.log(newUser);\n    //     if (this.props.handleCancel) {\n    //       this.props.handleCancel();\n    //     }\n    //     fetch(\"/api/signup\", {\n    //         method: 'POST',\n    //         body: JSON.stringify(newUser),\n    //         headers: {\n    //             'Content-Type': 'application/x-www-form-urlencoded',\n    //             },\n    //     }).then(response => response.json())\n    //     .then(response => {console.log('response: ', response);\n    //    if(!this.props.handleRegister) { this.props.history.push({\n    //       pathname: 'message',\n    //       state: {message: response.message}\n    //     })}\n    //   else {\n    //     this.props.handleRegister(newUser)\n    //   }})\n    //     .catch(error => console.log('error:', error));\n    //     }\n    //   });\n    //   this.props.form.resetFields();\n    };\n  \n    handleConfirmBlur = e => {\n      const { value } = e.target;\n      this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n    \n    render() {\n      const { getFieldDecorator } = this.props.form;\n      const formStyle = {\n        //   marginLeft: '20%',\n        //   marginTop: '10%',\n        //   width: '50%'\n      }\n  \n      const formItemLayout = {\n        labelCol: {\n          xs: { span: 24 },\n          sm: { span: 8 },\n        },\n        wrapperCol: {\n          xs: { span: 24 },\n          sm: { span: 16 },\n        },\n      };\n      const tailFormItemLayout = {\n        wrapperCol: {\n          xs: {\n            span: 24,\n            offset: 0,\n          },\n          sm: {\n            span: 16,\n            offset: 8,\n          },\n        },\n      };\n       return (\n        // <Form {...formItemLayout} onSubmit={this.handleSubmit} className='form' style={formStyle}>\n        //      <Form.Item label={<span>Name</span>}>\n        //     {getFieldDecorator('nickname', {\n        //        rules: [\n        //        { required: true, message: 'Please input your name!', whitespace: true },\n        //        { min: 6, message: 'Name can contain at least 6 characters!' },\n        //        { max: 30, message: 'Name can contain up to 30 characters!' }\n        //     ],\n        //     })(<Input />)}\n        //   </Form.Item>\n        //   <Form.Item label=\"E-mail\">\n        //     {getFieldDecorator('email', {\n        //       rules: [\n        //         {\n        //           type: 'email',\n        //           message: 'The input is not valid E-mail!',\n        //         },\n        //         {\n        //           required: true,\n        //           message: 'Please input your E-mail!',\n        //         },\n        //       ],\n        //     })(<Input />)}\n        //   </Form.Item>\n        //   <Form.Item label=\"Mobile Number\">\n        //     {getFieldDecorator('phone', {\n        //       rules: [\n        //       { required: true, message: 'Please input your mobile number!' },\n        //       { min: 9, message: 'Please input correct mobile number!' },\n        //       { max: 9, message: 'Please input correct mobile number!' }\n        //     ],\n        //     })(<Input type='number' style={{ width: '100%' }}/>)}\n        //   </Form.Item>\n        //   <Form.Item label=\"Password\" >\n        //     {getFieldDecorator('password', {\n        //       rules: [\n        //         { required: true, message: 'Please input your password!' },\n        //         { min: 6, message: 'Password can contain at least 6 characters!' },\n        //         { max: 30, message: 'Password can contain up to 30 characters!' },\n        //         { validator: this.validateToNextPassword },\n        //       ],\n        //     })(<Input.Password />)}\n        //   </Form.Item>\n        //   <Form.Item label=\"Confirm Password\" hasFeedback>\n        //     {getFieldDecorator('confirm', {\n        //       rules: [\n        //         { required: true, message: 'Please confirm your password!'},\n        //         { validator: this.compareToFirstPassword },\n        //       ],\n        //     })(<Input.Password onBlur={this.handleConfirmBlur} />)}\n        //   </Form.Item>\n        //  <Form.Item {...tailFormItemLayout}>\n        //     <Button type=\"primary\" htmlType=\"submit\">\n        //       Register\n        //     </Button>\n        //     <br />\n        //   </Form.Item>\n        // </Form>\n        <input type='number'/>\n      );\n    }\n  }\n  \n  const WrappedAddProblemForm = Form.create({ name: 'register' })(AddProblemForm);\n  \nexport default WrappedAddProblemForm;"]},"metadata":{},"sourceType":"module"}